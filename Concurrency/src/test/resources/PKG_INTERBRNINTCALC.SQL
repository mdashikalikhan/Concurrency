CREATE OR REPLACE PACKAGE BODY SBBD_IUT.PKG_INTERBRNINTCALC
AS
   PROCEDURE SP_INTERBRNINTCALC (
      P_ENTITY_NUM     IN ENTITYNUM.ENTITYNUM_NUMBER%TYPE,
      P_BRN_CODE       IN MBRN.MBRN_CODE%TYPE DEFAULT 0,
      P_PROCESS_DATE      PKG_COMMON_TYPES.DATE_T DEFAULT NULL,
      P_USER_ID        IN USERS.USER_ID%TYPE DEFAULT '')
   IS
      V_BRN_CODE       MBRN.MBRN_CODE%TYPE := NVL (P_BRN_CODE, 0);
      V_ENTITY_NUM     ENTITYNUM.ENTITYNUM_NUMBER%TYPE := NVL (P_ENTITY_NUM, 1);
      V_CBD            MAINCONT.MN_CURR_BUSINESS_DATE%TYPE;
      V_PROCESS_DATE   PKG_COMMON_TYPES.DATE_T := P_PROCESS_DATE;
      V_USER_ID        USERS.USER_ID%TYPE := TRIM (P_USER_ID);
      V_FIN_YEAR       PKG_COMMON_TYPES.NUMBER_T;
      V_BASE_CURR      INSTALL.INS_BASE_CURR_CODE%TYPE;
      V_RUN_NUMBER     PKG_COMMON_TYPES.NUMBER_T := 1;

      V_ERR_MSG        VARCHAR2 (1000);
      MYEXCEPTION      EXCEPTION;

      FUNCTION FN_GET_RUNNO
         RETURN NUMBER
      IS
         W_RUN_NUMBER   PKG_COMMON_TYPES.NUMBER_T := 1;

         PROCEDURE SP_DEL_TEMP_TABLE (
            W_DEL_RUN_NO IN PKG_COMMON_TYPES.NUMBER_T)
         IS
         BEGIN
            DELETE FROM IBRNINTCALC
                  WHERE     IBRNINTCALC_ENTITY_NUM = V_ENTITY_NUM
                        AND IBRNINTCALC_RUN_NUMBER = W_DEL_RUN_NO;

            DELETE FROM IBRNINTCALCDTL
                  WHERE     IBRNICDTL_ENTITY_NUM = V_ENTITY_NUM
                        AND IBRNICDTL_RUN_NUMBER = W_DEL_RUN_NO;

            DELETE FROM IBRINTPOSTCTL
                  WHERE     IBRINTPOSTCTL_ENTITY_NUM = V_ENTITY_NUM
                        AND IBRINTPOSTCTL_RUN_NUMBER = W_DEL_RUN_NO;
         END;

      BEGIN
         SELECT GENRUNNUM.NEXTVAL INTO W_RUN_NUMBER FROM DUAL;

         SP_DEL_TEMP_TABLE (W_RUN_NUMBER);
         RETURN NVL (W_RUN_NUMBER, 1);
      END;


      PROCEDURE PROCESS_BRN_WISE (BRN_CODE IN MBRN.MBRN_CODE%TYPE)
      IS
         TYPE GLINTPM_RT IS RECORD
         (
            GLACC_CODE        EXTGL.EXTGL_ACCESS_CODE%TYPE,
            DR_BAL_INT_REQD   GLIBRINTPM.GLIBRIPM_DB_BAL_INT_REQD%TYPE,
            DR_BAL_INT_RATE   GLINTHIST.GLINTHIST_INT_RATE_DB_BAL%TYPE,
            RECV_HEAD         GLIBRINTPM.GLIBRIPM_INT_RECVRY_GL_HEAD%TYPE,
            INCOME_HEAD       GLIBRINTPM.GLIBRIPM_INCOME_HEAD%TYPE,
            CR_BAL_INT_REQD   GLIBRINTPM.GLIBRIPM_CR_BAL_INT_REQD%TYPE,
            CR_BAL_INT_RATE   GLINTHIST.GLINTHIST_INT_RATE_CR_BAL%TYPE,
            PAYABLE_HEAD      GLIBRINTPM.GLIBRIPM_INT_PAY_GL_HEAD%TYPE,
            EXPENSE_HEAD      GLIBRINTPM.GLIBRIPM_EXPENSE_HEAD%TYPE,
            RNDOFF_CHOICE     GLIBRINTPM.GLIBRIPM_RNDOFF_CHOICE%TYPE,
            RNDOFF_FACTOR     GLIBRINTPM.GLIBRIPM_RNDOFF_FACTOR%TYPE,
            CALC_DENOM        PKG_COMMON_TYPES.NUMBER_T
         );

         TYPE GLINTPM_TT IS TABLE OF GLINTPM_RT
            INDEX BY PLS_INTEGER;

         GLINTPM_T                    GLINTPM_TT;

         V_BRN_MIG_DATE               MIG_DETAIL.MIG_END_DATE%TYPE;
         INTCALCDTL_INDX              PKG_COMMON_TYPES.NUMBER_T := 1;
         V_CALC_ON_CONSOLIDATED_BAL   BOOLEAN := FALSE;

         PROCEDURE POPULATE_GLINTPM
         IS
            TYPE TT_GL_ACC_CODES IS TABLE OF EXTGL.EXTGL_ACCESS_CODE%TYPE
               INDEX BY PLS_INTEGER;

            V_GL_ACC_CODES         TT_GL_ACC_CODES;
            V_GL_ACC_CODE          EXTGL.EXTGL_ACCESS_CODE%TYPE;
            V_GLINTHIST_ROW        GLINTHIST%ROWTYPE;
            V_GLIBRINTPMHIST_ROW   GLIBRINTPMHIST%ROWTYPE;

            PROCEDURE CHECK_CALC_ON_CONSOLIDATED_BAL
            IS
               V_GLINTPM_GL_HEAD   GLIBRINTPMHIST.GLIBRIPMH_INTER_GL_HEAD%TYPE;
            BEGIN
               SELECT TRIM (GLIBRIPMH_INTER_GL_HEAD)
                 INTO V_GLINTPM_GL_HEAD
                 FROM GLIBRINTPMHIST
                WHERE     GLIBRIPMH_CURR_CODE = V_BASE_CURR
                      AND TRIM (GLIBRIPMH_INTER_GL_HEAD) IS NULL
                      AND GLIBRIPMH_AUTH_ON IS NOT NULL
                      AND GLIBRIPMH_EFF_DATE =
                             (SELECT MAX (GLIBRIPMH_EFF_DATE)
                                FROM GLIBRINTPMHIST
                               WHERE     GLIBRIPMH_CURR_CODE = V_BASE_CURR
                                     AND TRIM (GLIBRIPMH_INTER_GL_HEAD) IS NULL
                                     AND GLIBRIPMH_EFF_DATE <= V_PROCESS_DATE
                                     AND GLIBRIPMH_AUTH_ON IS NOT NULL);

               V_CALC_ON_CONSOLIDATED_BAL := TRUE;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

         BEGIN
            CHECK_CALC_ON_CONSOLIDATED_BAL;

            IF V_CALC_ON_CONSOLIDATED_BAL
            THEN
               SELECT *
                 INTO V_GLIBRINTPMHIST_ROW
                 FROM GLIBRINTPMHIST
                WHERE     TRIM (GLIBRIPMH_INTER_GL_HEAD) IS NULL
                      AND GLIBRIPMH_CURR_CODE = V_BASE_CURR
                      AND (   NVL (GLIBRIPMH_CR_BAL_INT_REQD, '0') = '1'
                           OR NVL (GLIBRIPMH_DB_BAL_INT_REQD, '0') = '1')
                      AND GLIBRIPMH_AUTH_ON IS NOT NULL
                      AND GLIBRIPMH_EFF_DATE =
                             (SELECT MAX (GLIBRIPMH_EFF_DATE)
                                FROM GLIBRINTPMHIST
                               WHERE     TRIM (GLIBRIPMH_INTER_GL_HEAD)
                                            IS NULL
                                     AND GLIBRIPMH_CURR_CODE = V_BASE_CURR
                                     AND (   NVL (GLIBRIPMH_CR_BAL_INT_REQD,
                                                  '0') = '1'
                                          OR NVL (GLIBRIPMH_DB_BAL_INT_REQD,
                                                  '0') = '1')
                                     AND GLIBRIPMH_AUTH_ON IS NOT NULL
                                     AND GLIBRIPMH_EFF_DATE <= V_PROCESS_DATE);
            END IF;

              -- POPULATE DISTINCT GL ACCESS CODES FOR WHICH INTEREST CALCULATION TO HAPPEN
              -- CURRENTLY NO SUPPORT TO DISABLE INTEREST CALCULATION FOR A PARTICULAR GL
              SELECT DISTINCT GLINTHIST_GLACC_CODE
                BULK COLLECT INTO V_GL_ACC_CODES
                FROM GLINTHIST, EXTGL
               WHERE     GLINTHIST_GLACC_CODE = EXTGL_ACCESS_CODE
                     AND GLINTHIST_EFF_DATE <= V_PROCESS_DATE
            ORDER BY GLINTHIST_GLACC_CODE;

            FOR INDX IN NVL (V_GL_ACC_CODES.FIRST, 0) ..
                        NVL (V_GL_ACC_CODES.LAST, -1)
            LOOP
               BEGIN
                  V_GL_ACC_CODE := V_GL_ACC_CODES (INDX);

                  SELECT *
                    INTO V_GLINTHIST_ROW
                    FROM GLINTHIST
                   WHERE     GLINTHIST_ENTITY_NUM = V_ENTITY_NUM
                         AND GLINTHIST_GLACC_CODE = V_GL_ACC_CODE
                         AND GLINTHIST_CURR_CODE = V_BASE_CURR
                         AND GLINTHIST_BRN_CODE = BRN_CODE
                         AND GLINTHIST_AUTH_ON IS NOT NULL
                         AND GLINTHIST_EFF_DATE =
                                (SELECT MAX (GLINTHIST_EFF_DATE)
                                   FROM GLINTHIST
                                  WHERE     GLINTHIST_ENTITY_NUM =
                                               V_ENTITY_NUM
                                        AND GLINTHIST_GLACC_CODE =
                                               V_GL_ACC_CODE
                                        AND GLINTHIST_CURR_CODE = V_BASE_CURR
                                        AND GLINTHIST_BRN_CODE = BRN_CODE
                                        AND GLINTHIST_AUTH_ON IS NOT NULL
                                        AND GLINTHIST_EFF_DATE <=
                                               V_PROCESS_DATE);
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     SELECT *
                       INTO V_GLINTHIST_ROW
                       FROM GLINTHIST
                      WHERE     GLINTHIST_ENTITY_NUM = V_ENTITY_NUM
                            AND GLINTHIST_GLACC_CODE = V_GL_ACC_CODE
                            AND GLINTHIST_CURR_CODE = V_BASE_CURR
                            AND NVL (GLINTHIST_BRN_CODE, 0) = 0
                            AND GLINTHIST_AUTH_ON IS NOT NULL
                            AND GLINTHIST_EFF_DATE =
                                   (SELECT MAX (GLINTHIST_EFF_DATE)
                                      FROM GLINTHIST
                                     WHERE     GLINTHIST_ENTITY_NUM =
                                                  V_ENTITY_NUM
                                           AND GLINTHIST_GLACC_CODE =
                                                  V_GL_ACC_CODE
                                           AND GLINTHIST_CURR_CODE =
                                                  V_BASE_CURR
                                           AND NVL (GLINTHIST_BRN_CODE, 0) =
                                                  0
                                           AND GLINTHIST_AUTH_ON IS NOT NULL
                                           AND GLINTHIST_EFF_DATE <=
                                                  V_PROCESS_DATE);
               END;

               GLINTPM_T (INDX).GLACC_CODE := V_GL_ACC_CODE;
               GLINTPM_T (INDX).DR_BAL_INT_RATE :=
                  V_GLINTHIST_ROW.GLINTHIST_INT_RATE_DB_BAL;
               GLINTPM_T (INDX).CR_BAL_INT_RATE :=
                  V_GLINTHIST_ROW.GLINTHIST_INT_RATE_CR_BAL;

               BEGIN
                  IF NOT V_CALC_ON_CONSOLIDATED_BAL
                  THEN
                     SELECT *
                       INTO V_GLIBRINTPMHIST_ROW
                       FROM GLIBRINTPMHIST
                      WHERE     GLIBRIPMH_INTER_GL_HEAD = V_GL_ACC_CODE
                            AND GLIBRIPMH_CURR_CODE = V_BASE_CURR
                            AND (   NVL (GLIBRIPMH_CR_BAL_INT_REQD, '0') =
                                       '1'
                                 OR NVL (GLIBRIPMH_DB_BAL_INT_REQD, '0') =
                                       '1')
                            AND GLIBRIPMH_AUTH_ON IS NOT NULL
                            AND GLIBRIPMH_EFF_DATE =
                                   (SELECT MAX (GLIBRIPMH_EFF_DATE)
                                      FROM GLIBRINTPMHIST
                                     WHERE     GLIBRIPMH_INTER_GL_HEAD =
                                                  V_GL_ACC_CODE
                                           AND GLIBRIPMH_CURR_CODE =
                                                  V_BASE_CURR
                                           AND (   NVL (
                                                      GLIBRIPMH_CR_BAL_INT_REQD,
                                                      '0') = '1'
                                                OR NVL (
                                                      GLIBRIPMH_DB_BAL_INT_REQD,
                                                      '0') = '1')
                                           AND GLIBRIPMH_AUTH_ON IS NOT NULL
                                           AND GLIBRIPMH_EFF_DATE <=
                                                  V_PROCESS_DATE);
                  END IF;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     NULL;
               END;

               GLINTPM_T (INDX).DR_BAL_INT_REQD :=
                  V_GLIBRINTPMHIST_ROW.GLIBRIPMH_DB_BAL_INT_REQD;
               GLINTPM_T (INDX).CR_BAL_INT_REQD :=
                  V_GLIBRINTPMHIST_ROW.GLIBRIPMH_CR_BAL_INT_REQD;
               GLINTPM_T (INDX).RECV_HEAD :=
                  V_GLIBRINTPMHIST_ROW.GLIBRIPMH_INT_RECVRY_GL_HEAD;
               GLINTPM_T (INDX).INCOME_HEAD :=
                  V_GLIBRINTPMHIST_ROW.GLIBRIPMH_INCOME_HEAD;
               GLINTPM_T (INDX).PAYABLE_HEAD :=
                  V_GLIBRINTPMHIST_ROW.GLIBRIPMH_INT_PAY_GL_HEAD;
               GLINTPM_T (INDX).EXPENSE_HEAD :=
                  V_GLIBRINTPMHIST_ROW.GLIBRIPMH_EXPENSE_HEAD;
               GLINTPM_T (INDX).RNDOFF_CHOICE :=
                  V_GLIBRINTPMHIST_ROW.GLIBRIPMH_RNDOFF_CHOICE;
               GLINTPM_T (INDX).RNDOFF_FACTOR :=
                  V_GLIBRINTPMHIST_ROW.GLIBRIPMH_RNDOFF_FACTOR;
               GLINTPM_T (INDX).CALC_DENOM :=
                  CASE NVL (
                          TRIM (
                             V_GLIBRINTPMHIST_ROW.GLIBRIPMH_INT_CALC_DENOM),
                          '1')
                     WHEN '1'
                     THEN
                        360
                     WHEN '2'
                     THEN
                        365
                     WHEN '3'
                     THEN
                        366
                     ELSE
                        360
                  END;
            END LOOP;
         END;

         PROCEDURE GET_BRN_MIG_DATE
         IS
         BEGIN
            BEGIN
               SELECT M.MIG_END_DATE
                 INTO V_BRN_MIG_DATE
                 FROM MIG_DETAIL M
                WHERE M.BRANCH_CODE = BRN_CODE;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
            END;
         END;

         PROCEDURE PROCESS_BRN_GL_WISE (GLINTPM_R IN GLINTPM_RT)
         IS
            TYPE GLHIST_BAL_RT IS RECORD
            (
               START_DATE      GLBALASONHIST.GLBALH_ASON_DATE%TYPE,
               END_DATE        GLBALASONHIST.GLBALH_ASON_DATE%TYPE,
               GLBALH_BC_BAL   GLBALASONHIST.GLBALH_BC_BAL%TYPE,
               NO_OF_DAYS      PKG_COMMON_TYPES.NUMBER_T
            );

            TYPE GLHIST_BAL_TT IS TABLE OF GLHIST_BAL_RT
               INDEX BY PLS_INTEGER;

            GLHIST_BAL         GLHIST_BAL_TT;
            GLVALDATED_TX      GLHIST_BAL_TT;

            TYPE INTCALCDTL_TT IS TABLE OF IBRNINTCALCDTL%ROWTYPE
               INDEX BY PLS_INTEGER;

            INTCALCDTL         INTCALCDTL_TT;

            INTCALC_R          IBRNINTCALC%ROWTYPE := NULL;

            V_TOT_CR_BAL       PKG_COMMON_TYPES.AMOUNT_T := 0;
            V_TOT_CR_BAL_INT   PKG_COMMON_TYPES.AMOUNT_T := 0;
            V_TOT_DR_BAL       PKG_COMMON_TYPES.AMOUNT_T := 0;
            V_TOT_DR_BAL_INT   PKG_COMMON_TYPES.AMOUNT_T := 0;
            V_NET_INT_AMT      PKG_COMMON_TYPES.AMOUNT_T := 0;

            V_BAL_START_DATE   PKG_COMMON_TYPES.DATE_T;

            FUNCTION GET_RNDOFF_AMT (
               ENTITY_NUM          ENTITYNUM.ENTITYNUM_NUMBER%TYPE,
               AMT              IN PKG_COMMON_TYPES.AMOUNT_T,
               RNDOFF_CHOICHE   IN GLIBRINTPM.GLIBRIPM_RNDOFF_CHOICE%TYPE,
               RNDOFF_FACTOR    IN GLIBRINTPM.GLIBRIPM_RNDOFF_FACTOR%TYPE)
               RETURN PKG_COMMON_TYPES.AMOUNT_T
            IS
               V_RNDOFF_AMT   PKG_COMMON_TYPES.AMOUNT_T := 0;
            BEGIN
               V_RNDOFF_AMT :=
                  FN_ROUNDOFF (ENTITY_NUM,
                               ABS (AMT),
                               RNDOFF_CHOICHE,
                               RNDOFF_FACTOR);
               V_RNDOFF_AMT :=
                  CASE
                     WHEN AMT < 0 THEN (-1 * V_RNDOFF_AMT)
                     ELSE V_RNDOFF_AMT
                  END;
               RETURN V_RNDOFF_AMT;
            END;

            PROCEDURE POPULATE_CALC_DETAIL_COL (
               GLINTPM_R       IN GLINTPM_RT,
               HIST_BAL        IN GLHIST_BAL_RT,
               HIST_BAL_TYPE   IN PKG_COMMON_TYPES.SINGLE_CHAR DEFAULT 'N')
            IS
               V_AMOUNT        PKG_COMMON_TYPES.AMOUNT_T
                                  := NVL (HIST_BAL.GLBALH_BC_BAL, 0);
               V_FROM_DATE     PKG_COMMON_TYPES.DATE_T := HIST_BAL.START_DATE;
               V_UPTO_DATE     PKG_COMMON_TYPES.DATE_T := HIST_BAL.END_DATE;
               V_NO_OF_DAYS    PKG_COMMON_TYPES.NUMBER_T
                                  := HIST_BAL.NO_OF_DAYS;
               V_AMT_PRODUCT   PKG_COMMON_TYPES.NUMBER_T := 0;
               V_INT_AMT       PKG_COMMON_TYPES.AMOUNT_T := 0;
               V_COL_TYPE      PKG_COMMON_TYPES.SINGLE_CHAR
                                  := NVL (TRIM (HIST_BAL_TYPE), 'N');
            BEGIN
               IF    (ABS (V_AMOUNT) > 0 AND V_COL_TYPE = 'V')
                  OR (V_AMOUNT > 0 AND GLINTPM_R.CR_BAL_INT_REQD = '1')
                  OR (V_AMOUNT < 0 AND GLINTPM_R.DR_BAL_INT_REQD = '1')
               THEN
                  V_AMT_PRODUCT := V_AMOUNT * V_NO_OF_DAYS;

                  IF V_AMT_PRODUCT > 0
                  THEN
                     V_TOT_CR_BAL := V_TOT_CR_BAL + ABS (V_AMT_PRODUCT);
                     V_INT_AMT :=
                          (V_AMT_PRODUCT * (GLINTPM_R.CR_BAL_INT_RATE / 100))
                        / GLINTPM_R.CALC_DENOM;
                  ELSIF V_AMT_PRODUCT < 0
                  THEN
                     V_TOT_DR_BAL := V_TOT_DR_BAL + ABS (V_AMT_PRODUCT);
                     V_INT_AMT :=
                          (V_AMT_PRODUCT * (GLINTPM_R.DR_BAL_INT_RATE / 100))
                        / GLINTPM_R.CALC_DENOM;
                  END IF;

                  IF ABS (V_INT_AMT) > 0
                  THEN
                     V_INT_AMT :=
                        GET_RNDOFF_AMT (V_ENTITY_NUM,
                                        V_INT_AMT,
                                        GLINTPM_R.RNDOFF_CHOICE,
                                        GLINTPM_R.RNDOFF_FACTOR);

                     IF V_INT_AMT > 0
                     THEN
                        V_TOT_CR_BAL_INT := V_TOT_CR_BAL_INT + ABS (V_INT_AMT);
                     ELSIF V_INT_AMT < 0
                     THEN
                        V_TOT_DR_BAL_INT := V_TOT_DR_BAL_INT + ABS (V_INT_AMT);
                     END IF;
                  END IF;
               ELSE
                  V_INT_AMT := 0;
               END IF;

               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_ENTITY_NUM :=
                  V_ENTITY_NUM;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_RUN_NUMBER :=
                  V_RUN_NUMBER;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_BRN_CODE := BRN_CODE;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_GLACC_CODE :=
                  GLINTPM_R.GLACC_CODE;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_CURR_CODE := V_BASE_CURR;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_PROC_DATE :=
                  V_PROCESS_DATE;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_DTL_SL_NUM :=
                  INTCALCDTL_INDX;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_FROM_DATE := V_FROM_DATE;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_UPTO_DATE := V_UPTO_DATE;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_BALANCE := V_AMOUNT;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_CR_INT_RATE :=
                  CASE
                     WHEN V_INT_AMT > 0 THEN GLINTPM_R.CR_BAL_INT_RATE
                     ELSE 0
                  END;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_DB_INT_RATE :=
                  CASE
                     WHEN V_INT_AMT < 0 THEN GLINTPM_R.DR_BAL_INT_RATE
                     ELSE 0
                  END;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_NUM_OF_DAYS :=
                  ABS (V_NO_OF_DAYS);
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_DB_PRODUCT :=
                  CASE
                     WHEN V_AMT_PRODUCT < 0 THEN ABS (V_AMT_PRODUCT)
                     ELSE 0
                  END;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_CR_PRODUCT :=
                  CASE
                     WHEN V_AMT_PRODUCT > 0 THEN ABS (V_AMT_PRODUCT)
                     ELSE 0
                  END;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_CR_INT_AMOUNT :=
                  CASE WHEN V_INT_AMT > 0 THEN ABS (V_INT_AMT) ELSE 0 END;
               INTCALCDTL (INTCALCDTL_INDX).IBRNICDTL_DB_INT_AMOUNT :=
                  CASE WHEN V_INT_AMT < 0 THEN ABS (V_INT_AMT) ELSE 0 END;

               INTCALCDTL_INDX := INTCALCDTL_INDX + 1;
            END;

            PROCEDURE POPULATE_CALC_SUM (GLINTPM_R IN GLINTPM_RT)
            IS
            BEGIN
               INTCALC_R.IBRNINTCALC_ENTITY_NUM := V_ENTITY_NUM;
               INTCALC_R.IBRNINTCALC_RUN_NUMBER := V_RUN_NUMBER;
               INTCALC_R.IBRNINTCALC_BRN_CODE := BRN_CODE;
               INTCALC_R.IBRNINTCALC_GLACC_CODE := GLINTPM_R.GLACC_CODE;
               INTCALC_R.IBRNINTCALC_CURR_CODE := V_BASE_CURR;
               INTCALC_R.IBRNINTCALC_PROC_DATE := V_PROCESS_DATE;
               INTCALC_R.IBRNINTCALC_INT_FROM_DATE := V_BAL_START_DATE;
               INTCALC_R.IBRNINTCALC_INT_UPTO_DATE := V_PROCESS_DATE;
               INTCALC_R.IBRNINTCALC_CR_BAL_INT := ABS (V_TOT_CR_BAL_INT);
               INTCALC_R.IBRNINTCALC_DB_BAL_INT := ABS (V_TOT_DR_BAL_INT);
               INTCALC_R.IBRNINTCALC_CR_BAL_INT_RND := ABS (V_TOT_CR_BAL_INT);
               INTCALC_R.IBRNINTCALC_DB_BAL_INT_RND := ABS (V_TOT_DR_BAL_INT);
               INTCALC_R.IBRNINTCALC_POSTED_FLG := '0';
               INTCALC_R.IBRNINTCALC_PROC_BY := V_USER_ID;
               INTCALC_R.IBRNINTCALC_PROC_ON := V_CBD;
               INTCALC_R.IBRNINTCALC_POSTED_BY := V_USER_ID;
               INTCALC_R.IBRNINTCALC_POSTED_ON := V_CBD;
               INTCALC_R.POST_TRAN_BRN := BRN_CODE;
               INTCALC_R.POST_TRAN_DATE := V_CBD;
               INTCALC_R.POST_TRAN_BATCH_NUM := 0;
            END;

            PROCEDURE POPULATE_GL_HIST_BAL (
               GLACC_CODE IN EXTGL.EXTGL_ACCESS_CODE%TYPE)
            IS
               GLHISTBAL_REC                GLHIST_BAL_RT;
               LAST_DAY_HISTBAL             GLBALASONHIST.GLBALH_BC_BAL%TYPE := 0;
               LAST_HISTBAL_CONT_FOR_DAYS   PKG_COMMON_TYPES.NUMBER_T := 0;
               LAST_DAY_BAL                 GLBBAL.GLBBAL_BC_BAL%TYPE := 0;
               HIST_BAL_LAST_INDEX          PLS_INTEGER := 0;
            BEGIN
                 SELECT MIN (H.GLBALH_ASON_DATE) START_DATE,
                        MAX (H.GLBALH_ASON_DATE) END_DATE,
                        H.GLBALH_BC_BAL,
                        (  MAX (H.GLBALH_ASON_DATE)
                         - MIN (H.GLBALH_ASON_DATE)
                         + 1)
                           NO_OF_DAYS
                   BULK COLLECT INTO GLHIST_BAL
                   FROM (SELECT G.*,
                                (  ROW_NUMBER ()
                                      OVER (ORDER BY G.GLBALH_ASON_DATE)
                                 - ROW_NUMBER ()
                                   OVER (PARTITION BY G.GLBALH_BC_BAL
                                         ORDER BY G.GLBALH_ASON_DATE))
                                   GRP
                           FROM (  SELECT GLBALH_ASON_DATE,
                                          SUM (GLBALH_BC_BAL) GLBALH_BC_BAL
                                     FROM GLBALASONHIST
                                    WHERE     GLBALH_ENTITY_NUM = V_ENTITY_NUM
                                          AND GLBALH_BRN_CODE = BRN_CODE
                                          AND GLBALH_GLACC_CODE = GLACC_CODE
                                          AND GLBALH_ASON_DATE BETWEEN V_BAL_START_DATE
                                                                   AND V_PROCESS_DATE
                                 GROUP BY GLBALH_ENTITY_NUM,
                                          GLBALH_BRN_CODE,
                                          GLBALH_GLACC_CODE,
                                          GLBALH_ASON_DATE) G) H
               GROUP BY H.GRP, H.GLBALH_BC_BAL
               ORDER BY MIN (H.GLBALH_ASON_DATE);

               -- GLBALASONHIST DOESN'T CONTAIN THE LAST DAY BALANCE
               -- SO THE PROCESS DATE BALANCE HAS TO BE CALCULATED SEPARATELY
               IF (GLHIST_BAL.COUNT > 0)
               THEN
                  GLHISTBAL_REC := GLHIST_BAL (GLHIST_BAL.LAST);
                  HIST_BAL_LAST_INDEX := GLHIST_BAL.LAST;

                  IF (    V_PROCESS_DATE > GLHISTBAL_REC.END_DATE
                      AND ABS (V_PROCESS_DATE - GLHISTBAL_REC.END_DATE) = 1
                      AND HIST_BAL_LAST_INDEX > 0)
                  THEN
                     LAST_DAY_HISTBAL := GLHISTBAL_REC.GLBALH_BC_BAL;
                     LAST_HISTBAL_CONT_FOR_DAYS := GLHISTBAL_REC.NO_OF_DAYS;

                     BEGIN
                        SELECT SUM (GLBBAL_BC_BAL)
                          INTO LAST_DAY_BAL
                          FROM GLBBAL
                         WHERE     GLBBAL_ENTITY_NUM = V_ENTITY_NUM
                               AND GLBBAL_BRANCH_CODE = BRN_CODE
                               AND GLBBAL_GLACC_CODE = GLACC_CODE
                               AND GLBBAL_YEAR =
                                      TO_NUMBER (
                                         TO_CHAR (V_PROCESS_DATE, 'YYYY'));
                     EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                           LAST_DAY_BAL := 0;
                     END;

                     IF LAST_DAY_BAL <> 0
                     THEN
                        IF LAST_DAY_BAL = LAST_DAY_HISTBAL
                        THEN
                           LAST_HISTBAL_CONT_FOR_DAYS :=
                              LAST_HISTBAL_CONT_FOR_DAYS + 1;
                           GLHIST_BAL (HIST_BAL_LAST_INDEX).NO_OF_DAYS :=
                              LAST_HISTBAL_CONT_FOR_DAYS;
                           GLHIST_BAL (HIST_BAL_LAST_INDEX).END_DATE :=
                              V_PROCESS_DATE;
                        ELSE
                           GLHIST_BAL (HIST_BAL_LAST_INDEX + 1).START_DATE :=
                              GLHIST_BAL (HIST_BAL_LAST_INDEX).END_DATE;
                           GLHIST_BAL (HIST_BAL_LAST_INDEX + 1).END_DATE :=
                              V_PROCESS_DATE;
                           GLHIST_BAL (HIST_BAL_LAST_INDEX + 1).GLBALH_BC_BAL :=
                              LAST_DAY_BAL;
                           GLHIST_BAL (HIST_BAL_LAST_INDEX + 1).NO_OF_DAYS :=
                              1;
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END;

            PROCEDURE POPULATE_GL_VAL_DATED_TX (
               GLACC_CODE IN EXTGL.EXTGL_ACCESS_CODE%TYPE)
            IS
               W_SQL   PKG_COMMON_TYPES.STRING_T;
            BEGIN
               W_SQL :=
                     'SELECT Q.FROM_DATE,
                        Q.UPTO_DATE,
                        SUM (Q.NET_AMOUNT) OVER (ORDER BY Q.FROM_DATE ASC)
                           AMOUNT,
                        ABS(Q.UPTO_DATE - Q.FROM_DATE + 1) NO_OF_DAYS
                   FROM (SELECT P.TRAN_VALUE_DATE FROM_DATE,
                                (P.CR_SUM - P.DR_SUM) NET_AMOUNT,
                                CASE
                                   WHEN (P.CR_SUM - P.DR_SUM) > 0 THEN ''C''
                                   ELSE ''D''
                                END
                                   DR_CR,
                                LEAD (P.TRAN_VALUE_DATE - 1, 1, P.TRAN_DATE_OF_TRAN - 1)
                                   OVER (ORDER BY P.TRAN_VALUE_DATE ASC)
                                   UPTO_DATE
                           FROM (  SELECT O.TRAN_DATE_OF_TRAN,
                                          O.TRAN_VALUE_DATE,
                                          SUM (
                                             CASE
                                                WHEN O.TRAN_DB_CR_FLG = ''D''
                                                THEN
                                                   O.TRAN_AMOUNT
                                                ELSE
                                                   0
                                             END)
                                             DR_SUM,
                                          SUM (
                                             CASE
                                                WHEN O.TRAN_DB_CR_FLG = ''C''
                                                THEN
                                                   O.TRAN_AMOUNT
                                                ELSE
                                                   0
                                             END)
                                             CR_SUM
                                     FROM (SELECT TRAN_DATE_OF_TRAN,
                                                  TRAN_VALUE_DATE,
                                                  TRAN_DB_CR_FLG,
                                                  CASE
                                                     WHEN NVL (
                                                             TRAN_BASE_CURR_EQ_AMT,
                                                             0) <> 0
                                                     THEN
                                                        NVL (
                                                           TRAN_BASE_CURR_EQ_AMT,
                                                           0)
                                                     ELSE
                                                        NVL (TRAN_AMOUNT, 0)
                                                  END
                                                     TRAN_AMOUNT
                                             FROM TRAN'
                  || V_FIN_YEAR
                  || ' WHERE TRAN_ENTITY_NUM = :1
                                                  AND TRAN_ACING_BRN_CODE = :2
                                                  AND TRAN_DATE_OF_TRAN BETWEEN :3 AND :4
                                                  AND TO_NUMBER (TRAN_GLACC_CODE) = TO_NUMBER (:5)
                                                  AND TRAN_AMOUNT <> 0
                                                  AND TRAN_AC_CANCEL_AMT = 0
                                                  AND TRAN_DATE_OF_TRAN <>
                                                         TRAN_VALUE_DATE
                                                  AND TRAN_AUTH_ON IS NOT NULL) O
                                 GROUP BY O.TRAN_DATE_OF_TRAN, O.TRAN_VALUE_DATE) P
                          WHERE (P.CR_SUM - P.DR_SUM) <> 0) Q
               ORDER BY Q.FROM_DATE';

               EXECUTE IMMEDIATE W_SQL
                  BULK COLLECT INTO GLVALDATED_TX
                  USING V_ENTITY_NUM,
                        BRN_CODE,
                        V_BAL_START_DATE,
                        V_PROCESS_DATE,
                        GLACC_CODE;
            END;

            PROCEDURE GET_CALC_START_DATE (
               GL_ACC_CODE IN EXTGL.EXTGL_ACCESS_CODE%TYPE)
            IS
               GL_LAST_PROC_DATE   PKG_COMMON_TYPES.DATE_T;

               FUNCTION GL_LAST_PROCESS_DATE (
                  GLACC_CODE IN EXTGL.EXTGL_ACCESS_CODE%TYPE)
                  RETURN PKG_COMMON_TYPES.DATE_T
               IS
                  V_GL_LAST_PROCESS_DATE   PKG_COMMON_TYPES.DATE_T;
               BEGIN
                  BEGIN
                     SELECT IBRNINTCALC_PROC_DATE
                       INTO V_GL_LAST_PROCESS_DATE
                       FROM IBRNINTCALC
                      WHERE     IBRNINTCALC_ENTITY_NUM = V_ENTITY_NUM
                            AND IBRNINTCALC_BRN_CODE = BRN_CODE
                            AND IBRNINTCALC_GLACC_CODE = GLACC_CODE
                            AND IBRNINTCALC_CURR_CODE = V_BASE_CURR
                            AND IBRNINTCALC_PROC_DATE =
                                   (SELECT MAX (IBRNINTCALC_PROC_DATE)
                                      FROM IBRNINTCALC
                                     WHERE     IBRNINTCALC_ENTITY_NUM =
                                                  V_ENTITY_NUM
                                           AND IBRNINTCALC_BRN_CODE =
                                                  BRN_CODE
                                           AND IBRNINTCALC_GLACC_CODE =
                                                  GLACC_CODE
                                           AND IBRNINTCALC_CURR_CODE =
                                                  V_BASE_CURR);
                  EXCEPTION
                     WHEN NO_DATA_FOUND
                     THEN
                        NULL;
                  END;

                  RETURN V_GL_LAST_PROCESS_DATE;
               END;

            BEGIN
               GL_LAST_PROC_DATE := GL_LAST_PROCESS_DATE (GL_ACC_CODE);

               IF GL_LAST_PROC_DATE IS NOT NULL
               THEN
                  V_BAL_START_DATE := GL_LAST_PROC_DATE + 1;
               ELSE
                  V_BAL_START_DATE := V_BRN_MIG_DATE + 1;
               END IF;
            END;

            PROCEDURE POST_PROCESS (GLPM_R IN GLINTPM_RT)
            IS
               W_ERR_CODE       VARCHAR2 (6) := NULL;
               V_BATCH_NUMBER   IBRNINTCALC.POST_TRAN_BATCH_NUM%TYPE;
               W_IND            PKG_COMMON_TYPES.NUMBER_T := 0;

               PROCEDURE SET_VOUCHER
               IS
               BEGIN
                  W_IND := W_IND + 1;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_ACING_BRN_CODE :=
                     BRN_CODE;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_INTERNAL_ACNUM := 0;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_GLACC_CODE :=
                     CASE
                        WHEN V_NET_INT_AMT > 0 THEN GLPM_R.EXPENSE_HEAD
                        ELSE GLPM_R.RECV_HEAD
                     END;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_DB_CR_FLG := 'D';
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_TYPE_OF_TRAN := '1';
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_AMOUNT :=
                     ABS (V_NET_INT_AMT);
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_CURR_CODE :=
                     V_BASE_CURR;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_NARR_DTL1 :=
                     'IBR Interest, ';
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_NARR_DTL2 :=
                     'For GL: ' || GLPM_R.GLACC_CODE;

                  W_IND := W_IND + 1;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_ACING_BRN_CODE :=
                     BRN_CODE;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_INTERNAL_ACNUM := 0;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_GLACC_CODE :=
                     CASE
                        WHEN V_NET_INT_AMT > 0 THEN GLPM_R.PAYABLE_HEAD
                        ELSE GLPM_R.INCOME_HEAD
                     END;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_DB_CR_FLG := 'C';
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_TYPE_OF_TRAN := '1';
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_AMOUNT :=
                     ABS (V_NET_INT_AMT);
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_CURR_CODE :=
                     V_BASE_CURR;
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_NARR_DTL1 :=
                     'IBR Interest, ';
                  PKG_AUTOPOST.PV_TRAN_REC (W_IND).TRAN_NARR_DTL2 :=
                     'For GL: ' || GLPM_R.GLACC_CODE;
               END;

               PROCEDURE SET_TRAN_KEY_VALUES
               IS
               BEGIN
                  PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BRN_CODE := BRN_CODE;
                  PKG_AUTOPOST.PV_TRAN_KEY.TRAN_DATE_OF_TRAN := V_CBD;
                  PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BATCH_NUMBER := 0;
                  PKG_AUTOPOST.PV_TRAN_KEY.TRAN_BATCH_SL_NUM := 0;
               END;

               PROCEDURE SET_TRANBAT_VALUES
               IS
               BEGIN
                  PKG_AUTOPOST.PV_TRANBAT.TRANBAT_SOURCE_TABLE :=
                     'IBRNINTCALC';

                  PKG_AUTOPOST.PV_TRANBAT.TRANBAT_SOURCE_KEY :=
                        V_ENTITY_NUM
                     || '|'
                     || BRN_CODE
                     || '|'
                     || GLPM_R.GLACC_CODE
                     || '|'
                     || V_BASE_CURR
                     || '|'
                     || V_CBD;

                  PKG_AUTOPOST.PV_TRANBAT.TRANBAT_NARR_DTL1 :=
                     'IBR Interest Posting';
               END;

               PROCEDURE UPDATE_IBRCALCTABLES
               IS
                  PROCEDURE UPDATE_IBRINTCALC
                  IS
                  BEGIN
                     INTCALC_R.IBRNINTCALC_POSTED_FLG := '1';
                     INTCALC_R.POST_TRAN_BATCH_NUM := V_BATCH_NUMBER;

                     INSERT INTO IBRNINTCALC
                          VALUES INTCALC_R;
                  END;

                  PROCEDURE UPDATE_IBRINTCALCDTL
                  IS
                  BEGIN
                     FORALL I IN INTCALCDTL.FIRST .. INTCALCDTL.LAST
                        INSERT INTO IBRNINTCALCDTL
                             VALUES INTCALCDTL (I);
                  END;

                  PROCEDURE UPDATE_IBRINTPOSTCTL
                  IS
                  BEGIN
                     INSERT INTO IBRINTPOSTCTL (IBRINTPOSTCTL_ENTITY_NUM,
                                                IBRINTPOSTCTL_RUN_NUMBER,
                                                IBRINTPOSTCTL_BRN_CODE,
                                                IBRINTPOSTCTL_GLACC_CODE,
                                                IBRINTPOSTCTL_CURR_CODE,
                                                IBRINTPOSTCTL_PROC_DATE,
                                                IBRINTPOSTCTL_POSTED_BY,
                                                IBRINTPOSTCTL_POSTED_ON)
                          VALUES (V_ENTITY_NUM,
                                  V_RUN_NUMBER,
                                  BRN_CODE,
                                  GLPM_R.GLACC_CODE,
                                  V_BASE_CURR,
                                  V_PROCESS_DATE,
                                  V_USER_ID,
                                  V_CBD);
                  END;

               BEGIN
                  UPDATE_IBRINTCALC;
                  UPDATE_IBRINTCALCDTL;
                  UPDATE_IBRINTPOSTCTL;
               END;

            BEGIN
               SET_VOUCHER;

               PKG_POST_INTERFACE.G_PGM_NAME :=
                  PKG_EODSOD_FLAGS.PV_PROCESS_NAME;

               SET_TRAN_KEY_VALUES;
               SET_TRANBAT_VALUES;

               PKG_APOST_INTERFACE.SP_POST_SODEOD_BATCH (V_ENTITY_NUM,
                                                         'A',
                                                         W_IND,
                                                         0,
                                                         W_ERR_CODE,
                                                         V_ERR_MSG,
                                                         V_BATCH_NUMBER);

               IF (W_ERR_CODE <> '0000')
               THEN
                  V_ERR_MSG := FN_GET_AUTOPOST_ERR_MSG (V_ENTITY_NUM);
                  RAISE MYEXCEPTION;
               END IF;

               PKG_APOST_INTERFACE.SP_POSTING_END (V_ENTITY_NUM);
               UPDATE_IBRCALCTABLES;
            END;

         BEGIN
            GET_CALC_START_DATE (GLINTPM_R.GLACC_CODE);
            POPULATE_GL_HIST_BAL (GLINTPM_R.GLACC_CODE);
            POPULATE_GL_VAL_DATED_TX (GLINTPM_R.GLACC_CODE);

            -- FIRST, PROCESS VALUE DATED TX
            IF GLVALDATED_TX.COUNT > 0
            THEN
               FOR VALINDX IN GLVALDATED_TX.FIRST .. GLVALDATED_TX.LAST
               LOOP
                  POPULATE_CALC_DETAIL_COL (GLINTPM_R,
                                            GLVALDATED_TX (VALINDX),
                                            'V');
               END LOOP;
            END IF;

            -- THEN, NORMAL GL BALANCE CALCULATION
            IF GLHIST_BAL.COUNT > 0
            THEN
               FOR HISTINDX IN GLHIST_BAL.FIRST .. GLHIST_BAL.LAST
               LOOP
                  POPULATE_CALC_DETAIL_COL (GLINTPM_R, GLHIST_BAL (HISTINDX));
               END LOOP;
            END IF;

            IF ABS (V_TOT_CR_BAL_INT) > 0 OR ABS (V_TOT_DR_BAL_INT) > 0
            THEN
               POPULATE_CALC_SUM (GLINTPM_R);
               V_NET_INT_AMT :=
                  ABS (V_TOT_CR_BAL_INT) - ABS (V_TOT_DR_BAL_INT);

               IF ABS (V_NET_INT_AMT) > 0
               THEN
                  POST_PROCESS (GLINTPM_R);
               END IF;
            END IF;
         END;

      BEGIN
         BEGIN
            GET_BRN_MIG_DATE;
            POPULATE_GLINTPM;

            IF GLINTPM_T.COUNT > 0
            THEN
               -- GL LOOP FOR A SINGLE BRANCH
               FOR INDX IN GLINTPM_T.FIRST .. GLINTPM_T.LAST
               LOOP
                  PROCESS_BRN_GL_WISE (GLINTPM_T (INDX));
                  -- GL WISE DETAILS SERIAL WILL BE INITIALIZED
                  INTCALCDTL_INDX := 1;
               END LOOP;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_ERR_MSG :=
                  SUBSTR (
                        'Error in processing branch: '
                     || BRN_CODE
                     || ', Msg: '
                     || SQLERRM,
                     1,
                     1000);
               PKG_PB_GLOBAL.DETAIL_ERRLOG (V_ENTITY_NUM,
                                            'E',
                                            V_ERR_MSG,
                                            ' ',
                                            0);
         END;
      END;

   BEGIN
      PKG_ENTITY.SP_SET_ENTITY_CODE (V_ENTITY_NUM);
      V_CBD := PKG_PB_GLOBAL.FN_GET_CURR_BUS_DATE (V_ENTITY_NUM);

      IF V_USER_ID IS NULL
      THEN
         V_USER_ID := TRIM (PKG_EODSOD_FLAGS.PV_USER_ID);
      END IF;

      IF V_PROCESS_DATE IS NULL
      THEN
         V_PROCESS_DATE := V_CBD;
      END IF;

      V_FIN_YEAR := SP_GETFINYEAR (V_ENTITY_NUM, V_PROCESS_DATE);
      V_RUN_NUMBER := FN_GET_RUNNO;
      V_BASE_CURR := PKG_PB_GLOBAL.FN_GET_INS_BASE_CURR (V_ENTITY_NUM);

      PKG_PROCESS_CHECK.INIT_PROC_BRN_WISE (V_ENTITY_NUM, V_BRN_CODE);

      FOR IDX IN 1 .. PKG_PROCESS_CHECK.V_ACNTBRN.COUNT
      LOOP
         V_BRN_CODE := PKG_PROCESS_CHECK.V_ACNTBRN (IDX).LN_BRN_CODE;

         IF PKG_PROCESS_CHECK.CHK_BRN_ALREADY_PROCESSED (V_ENTITY_NUM,
                                                         V_BRN_CODE) = FALSE
         THEN
            PROCESS_BRN_WISE (V_BRN_CODE);

            IF TRIM (PKG_EODSOD_FLAGS.PV_ERROR_MSG) IS NULL
            THEN
               PKG_PROCESS_CHECK.INSERT_ROW_INTO_EODSODPROCBRN (V_ENTITY_NUM,
                                                                V_BRN_CODE);
            END IF;

            PKG_PROCESS_CHECK.CHECK_COMMIT_ROLLBACK_STATUS (V_ENTITY_NUM);
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF TRIM (V_ERR_MSG) IS NULL
         THEN
            V_ERR_MSG :=
               SUBSTR ('Error in SP_INTERBRNINTCALC: ' || SQLERRM, 1, 1000);
         END IF;

         PKG_EODSOD_FLAGS.PV_ERROR_MSG := V_ERR_MSG;
         PKG_PB_GLOBAL.DETAIL_ERRLOG (V_ENTITY_NUM,
                                      'E',
                                      PKG_EODSOD_FLAGS.PV_ERROR_MSG,
                                      ' ',
                                      0);
         PKG_PB_GLOBAL.DETAIL_ERRLOG (V_ENTITY_NUM,
                                      'E',
                                      SUBSTR (SQLERRM, 1, 1000),
                                      ' ',
                                      0);
   END;
END;
/
